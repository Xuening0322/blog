[{"title":"INT202 Lecture Notes","url":"/blog/2022/05/09/INT202/","content":"<h1 id=\"INT-202-Complexity-of-Algorithms\"><a href=\"#INT-202-Complexity-of-Algorithms\" class=\"headerlink\" title=\"INT 202 Complexity of Algorithms\"></a>INT 202 Complexity of Algorithms</h1><p>Lecture notes and some cheatsheets. Available at: <a href=\"https://github.com/Xuening0322/INT202-Complexity-of-Algorithms-22-Spring\">GitHub</a>. </p>\n<span id=\"more\"></span> \n\n<h2 id=\"Lecture-1-amp-2-Asymptotic-Notation\"><a href=\"#Lecture-1-amp-2-Asymptotic-Notation\" class=\"headerlink\" title=\"Lecture 1&amp;2 Asymptotic Notation\"></a>Lecture 1&amp;2 Asymptotic Notation</h2><p><img src=\"/2022/05/09/INT202/lec1&2.png\" alt=\"lec1&amp;2\"></p>\n<h4 id=\"Big-O-Cheatsheet\"><a href=\"#Big-O-Cheatsheet\" class=\"headerlink\" title=\"Big O Cheatsheet\"></a>Big O Cheatsheet</h4><p><img src=\"/2022/05/09/INT202/bigo1.png\" alt=\"bigo1\"></p>\n<p><img src=\"/2022/05/09/INT202/bigo2.png\" alt=\"bigo2\"></p>\n<p><img src=\"/2022/05/09/INT202/bigo3.png\" alt=\"bigo3\"></p>\n<h2 id=\"Lecture-3-Data-Structure\"><a href=\"#Lecture-3-Data-Structure\" class=\"headerlink\" title=\"Lecture 3 Data Structure\"></a>Lecture 3 Data Structure</h2><p><img src=\"/2022/05/09/INT202/lec3.png\" alt=\"lec3\"></p>\n<h2 id=\"Lecture-4-Rooted-Trees\"><a href=\"#Lecture-4-Rooted-Trees\" class=\"headerlink\" title=\"Lecture 4 Rooted Trees\"></a>Lecture 4 Rooted Trees</h2><p><img src=\"/2022/05/09/INT202/lec4.png\" alt=\"lec4\"></p>\n<h2 id=\"Lecture-5-Search-Algorithms\"><a href=\"#Lecture-5-Search-Algorithms\" class=\"headerlink\" title=\"Lecture 5 Search Algorithms\"></a>Lecture 5 Search Algorithms</h2><p><img src=\"/2022/05/09/INT202/lec5.png\" alt=\"lec5\"></p>\n<h2 id=\"Lecture-6-AVL-Tree\"><a href=\"#Lecture-6-AVL-Tree\" class=\"headerlink\" title=\"Lecture 6 AVL Tree\"></a>Lecture 6 AVL Tree</h2><p>Updating…</p>\n","categories":["INT202"],"tags":["Algorithm","Notes"]},{"title":"Hello World","url":"/blog/2022/05/03/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"INT301 Lecture Notes","url":"/blog/2023/02/06/INT301/","content":"<h1 id=\"INT-301-Bio-Computation\"><a href=\"#INT-301-Bio-Computation\" class=\"headerlink\" title=\"INT 301 Bio-Computation\"></a>INT 301 Bio-Computation</h1><p>One page cheatsheet for the final exam, including lecture notes and lab codes<br><a href=\"https://xuening.wang/2023/02/06/INT301/INT301-Cheatsheet.pdf\">click to download</a></p>\n<span id=\"more\"></span> \n\n<div class=\"pdfobject-container\" data-target=\"https://xuening.wang/2023/02/06/INT301/INT301-Cheatsheet.pdf\" data-height=\"500px\"></div>\n\n","categories":["INT301"],"tags":["Algorithm","Notes","Neural Networks"]},{"title":"CPT208 Lecture Notes","url":"/blog/2023/02/07/CPT208/","content":"<h1 id=\"CPT-208-Human-Centric-Computing\"><a href=\"#CPT-208-Human-Centric-Computing\" class=\"headerlink\" title=\"CPT 208 Human-Centric Computing\"></a>CPT 208 Human-Centric Computing</h1><p>Lecture notes in a mind map <a href=\"https://xuening.wang/2023/02/07/CPT208/CPT208-Mindmap.pdf\">click to download</a></p>\n<span id=\"more\"></span> \n\n<div class=\"pdfobject-container\" data-target=\"https://xuening.wang/2023/02/07/CPT208/CPT208-Mindmap.pdf\" data-height=\"500px\"></div>\n\n","categories":["CPT208"],"tags":["Notes","Human-Computer Interaction"]},{"title":"INT303 Lecture Notes","url":"/blog/2023/02/07/INT303/","content":"<h1 id=\"INT-303-Big-Data-Analytics\"><a href=\"#INT-303-Big-Data-Analytics\" class=\"headerlink\" title=\"INT 303 Big Data Analytics\"></a>INT 303 Big Data Analytics</h1><p>Mind map and possible questions <a href=\"https://xuening.wang/2023/02/07/INT303/INT303-Mindmap.pdf\">pdf1</a> <a href=\"https://xuening.wang/2023/02/07/INT303/Question_MapReduce.pdf\">pdf2</a> <a href=\"https://xuening.wang/2023/02/07/INT303/Questions_Big_Data_Conception.pdf\">pdf3</a></p>\n<span id=\"more\"></span> \n\n<p>Mind map</p>\n<div class=\"pdfobject-container\" data-target=\"https://xuening.wang/2023/02/07/INT303/INT303-Mindmap.pdf\" data-height=\"500px\"></div>\n\n<p>MapReduce</p>\n<div class=\"pdfobject-container\" data-target=\"https://xuening.wang/2023/02/07/INT303/Question_MapReduce.pdf\" data-height=\"500px\"></div>\n\n<p>Big Data Conception</p>\n<div class=\"pdfobject-container\" data-target=\"https://xuening.wang/2023/02/07/INT303/Questions_Big_Data_Conception.pdf\" data-height=\"500px\"></div>","categories":["INT303"],"tags":["Notes","Data Science"]},{"title":"Installing Gitbook on Mac","url":"/blog/2023/02/17/gitbook/","content":"<h1 id=\"Installing-Gitbook-on-Mac\"><a href=\"#Installing-Gitbook-on-Mac\" class=\"headerlink\" title=\"Installing Gitbook on Mac\"></a>Installing Gitbook on Mac</h1><p>Gitbook is a powerful tool for creating documentation and e-books, based on Node.js. Here is a step-by-step guide on how to install Gitbook on a Mac.<br>（又名从Win转Mac因为版本问题频频出错的踩坑指南）</p>\n<span id=\"more\"></span> \n\n<h3 id=\"Install-Node-js\"><a href=\"#Install-Node-js\" class=\"headerlink\" title=\"Install Node.js\"></a>Install Node.js</h3><p>Gitbook is based on Node.js, so it needs to be installed first. Here is how:</p>\n<h4 id=\"1-Download-the-Node-js-installation-package-and-double-click-to-install-it\"><a href=\"#1-Download-the-Node-js-installation-package-and-double-click-to-install-it\" class=\"headerlink\" title=\"1. Download the Node.js installation package and double-click to install it.\"></a><strong>1. Download the Node.js installation package and double-click to install it.</strong></h4><p>Note that Gitbook does not support the latest version of Node.js. It is recommended to install Node.js version 12. You can download the compiled file for your system from this link: <a href=\"https://nodejs.org/dist/latest-v12.x/\">https://nodejs.org/dist/latest-v12.x/</a>.</p>\n<p><u>Important: If you install the latest version of Node.js, you will encounter an error in the next step.</u></p>\n<h4 id=\"2-Confirm-Node-js-is-installed\"><a href=\"#2-Confirm-Node-js-is-installed\" class=\"headerlink\" title=\"2. Confirm Node.js is installed\"></a>2. <strong>Confirm Node.js is installed</strong></h4><p>In the terminal, type the following command to verify that Node.js is installed:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">node -v</span></span><br><span class=\"line\">v12.22.12</span><br></pre></td></tr></table></figure>\n\n<p>Also check the version of npm:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm -v</span></span><br><span class=\"line\">8.19.2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Install-Gitbook\"><a href=\"#Install-Gitbook\" class=\"headerlink\" title=\"Install Gitbook\"></a>Install Gitbook</h3><h4 id=\"1-Install-Gitbook-cli\"><a href=\"#1-Install-Gitbook-cli\" class=\"headerlink\" title=\"1. Install Gitbook-cli\"></a>1. Install Gitbook-cli</h4><p>In the terminal, type the following command to install Gitbook-cli:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install -g gitbook-cli</span></span><br></pre></td></tr></table></figure>\n\n<p>This is the first step in installing Gitbook.</p>\n<h4 id=\"2-Continue-to-install-Gitbook\"><a href=\"#2-Continue-to-install-Gitbook\" class=\"headerlink\" title=\"2. Continue to install Gitbook\"></a>2. Continue to install Gitbook</h4><p>Type the following command to check if Gitbook is installed:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook -V</span></span><br></pre></td></tr></table></figure>\n\n<p>If everything is working properly, you should see the following error:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (cb) cb.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">                 ^</span><br><span class=\"line\"><span class=\"title class_\">TypeError</span>: cb.<span class=\"property\">apply</span> is not a <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n\n<p>This error is caused by a legacy issue with the updated version of Node.js. The error message should also include the path to the JS file where the problem occurs. In this case, it should be a file called <code>polyfills.js</code> located at <code>/opt/homebrew/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/</code>.</p>\n<p>Open the file and comment out lines 62-64:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fs.stat = statFix(fs.stat)</span></span><br><span class=\"line\"><span class=\"comment\">// fs.fstat = statFix(fs.fstat)</span></span><br><span class=\"line\"><span class=\"comment\">// fs.lstat = statFix(fs.lstat)</span></span><br></pre></td></tr></table></figure>\n\n<p>Then re-run the command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook -V</span></span><br></pre></td></tr></table></figure>\n\n<p>At this point, you may see a message that says “Installing Gitbook 3.2.3 …….”. This may take some time. Wait for the installation to complete.</p>\n<h4 id=\"3-Initialize-Gitbook\"><a href=\"#3-Initialize-Gitbook\" class=\"headerlink\" title=\"3. Initialize Gitbook\"></a>3. Initialize Gitbook</h4><p>First, create a folder called “mygitbook” and switch to this folder:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> mygitbook &amp;&amp; <span class=\"built_in\">cd</span> mygitbook</span></span><br></pre></td></tr></table></figure>\n\n<p>Next, initialize the GitBook working directory and create necessary files:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook init</span></span><br></pre></td></tr></table></figure>\n\n<p>This will create two files: “README.md” for the project introduction and “SUMMARY.md” for configuring the GitBook directory structure. You can edit the directory structure in the “SUMMARY.md” file. Here’s an example structure:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Summary</span><br><span class=\"line\"></span><br><span class=\"line\">* [Introduction](README.md)</span><br><span class=\"line\">   * [Preface](Introduction.md)</span><br><span class=\"line\">   * [Translator&#x27;s Afterword](translator.md)</span><br><span class=\"line\">   * [Author&#x27;s Foreword](author.md)</span><br><span class=\"line\">* [Generators](Generators/README.md)</span><br><span class=\"line\">   * [Iterable](Generators/Iterable.md)</span><br><span class=\"line\">   * [Iterator](Generators/Iterator.md)</span><br><span class=\"line\">* [Decorators](decorators/README.md)</span><br><span class=\"line\">   * [Everything is an Object](decorators/everything_is_object.md)</span><br><span class=\"line\">   * [Your First Decorator](decorators/your_first_decorator.md)</span><br><span class=\"line\">       * [Use Cases](decorators/use_cases.md)</span><br><span class=\"line\">       * [Authorization](decorators/auth.md)</span><br><span class=\"line\">       * [Logging](decorators/logging.md)</span><br></pre></td></tr></table></figure>\n\n<p>Once you’ve created the directory structure, execute the following command in the root directory. Note that it only supports 2 levels of directory:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook init</span></span><br></pre></td></tr></table></figure>\n\n<p>Now you can start writing your GitBook content and compile it using the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook build</span></span><br></pre></td></tr></table></figure>\n\n<p>To preview your book, execute the following command in the root directory:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook serve</span></span><br></pre></td></tr></table></figure>\n\n<p>Then, open your browser and go to <a href=\"http://localhost:4000/\">http://localhost:4000/</a> or <a href=\"http://127.0.0.1:4000/\">http://127.0.0.1:4000/</a> to see the book’s effect. To stop the preview, press “ctrl+c”.</p>\n<h4 id=\"P-S-Replace-the-npm-registry\"><a href=\"#P-S-Replace-the-npm-registry\" class=\"headerlink\" title=\"P.S. Replace the npm registry\"></a>P.S. Replace the npm registry</h4><p>Note that if your Node.js version is too high, there is a known issue with “gitbook init” where the command does not create a “SUMMARY.md” file and gives an error message. </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook init</span></span><br><span class=\"line\">warn: no summary file in this book </span><br><span class=\"line\">info: create README.md </span><br><span class=\"line\">info: create SUMMARY.md </span><br><span class=\"line\"></span><br><span class=\"line\">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;data&quot; argument must be of type string or an instance of Buffer, TypedArray, or DataView. Received an instance of Promise</span><br></pre></td></tr></table></figure>\n\n<p>If you encounter this issue, switch to a lower version of Node.js by executing the following commands:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo npm install -g n</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo n 12.16.3</span></span><br></pre></td></tr></table></figure>\n\n<p>Then, run “gitbook init” again to create the “SUMMARY.md” file:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gitbook init</span></span><br></pre></td></tr></table></figure>\n\n<p>By following these steps, you should now be able to install and use GitBook to create and publish your own documentation. Happy writing!</p>\n","categories":["Blogs"],"tags":["Tech Blogs","MacOS"]},{"title":"Some Random Thoughts on Music Generation","url":"/blog/2023/03/19/musicgen/","content":"<h3 id=\"Progressive-Music-Generation-A-Human-and-Machine-Perspective\"><a href=\"#Progressive-Music-Generation-A-Human-and-Machine-Perspective\" class=\"headerlink\" title=\"Progressive Music Generation: A Human and Machine Perspective\"></a>Progressive Music Generation: A Human and Machine Perspective</h3><p>Human composers and songwriters often use a progressive approach when writing music. This involves starting with a simple idea, such as a single bar of music, and gradually building on it to create a complete piece. They may then expand this idea into a phrase, which is longer than a single bar but shorter than a full section. Once they have several phrases, they can start to piece them together to create sections, such as a verse or a chorus. Finally, they can arrange these sections into a full piece of music, making sure that each section flows smoothly into the next.</p>\n<span id=\"more\"></span> \n\n<p>Machines can also mimic this progressive approach to automatic music generation tasks. After training the model, a single bar of music can be generated by providing it with a seed sequence of musical data, such as a single note or a short melody. This generated bar can then be expanded into a complete phrase by feeding it back into the model along with additional seed data. With a few phrases generated, they can be pieced together to form a larger section of music. Finally, using the generated sections, a full piece of music can be created by experimenting with different ways of combining the sections, such as repeating or varying certain phrases.</p>\n<p>In terms of encoding the musical data for use with a Transformer model, different sequence lengths can be used for different levels of musical structure. For example, a sequence length of one or two notes can be used for encoding individual bars, a sequence length of 4-8 bars for encoding phrases, and a longer sequence length for encoding sections or full pieces of music. This allows the model to learn patterns and relationships at different levels of musical structure and generate music that is coherent and meaningful.</p>\n<p>Adopting the idea of text generation in music generation tasks can potentially lead to breakthroughs in generating coherent and creative music pieces. In 2020, Tan et al. [1] proposes a simple yet effective method of generating text in a progressive manner, inspired by generating images from low to high resolution. This approach generates domain-specific content keywords and then progressively refines them into complete passages in multiple stages. By taking advantage of pretrained language models at each stage, the approach can effectively adapt to any target domain given only a small set of examples. </p>\n<p><img src=\"/images/textgen.png\" alt=\"textgen\"></p>\n<p>Figure 1: Progressive generation of long text y given any condition x [1]</p>\n<p>This method can potentially be applied to music generation tasks, where the progressive generation can be used to generate different components of a music piece, such as the melody, harmony, and rhythm, in multiple stages. The approach can also help overcome the limitations of current music generation models, which often lack coherence and creativity in generating long and complex music pieces. With further research and development, the adoption of text generation techniques in music generation tasks can pave the way for more sophisticated and intelligent music generation systems.</p>\n<p>In conclusion, the progressive approach to music generation can be possibly used by both humans and machines. By starting with a simple idea and gradually building on it, composers and machine learning models can create cohesive and interesting pieces of music. With the help of machine learning models, even those without formal music training can experiment with generating music and exploring their creative side.</p>\n<p>References:</p>\n<p>[1] B. Tan, Z. Yang, M. AI-Shedivat, E. P. Xing, and Z. Hu, “Progressive Generation of Long Text with Pretrained Language Models.” arXiv, Apr. 14, 2021. Accessed: Mar. 19, 2023. [Online]. Available: <a href=\"http://arxiv.org/abs/2006.15720\">http://arxiv.org/abs/2006.15720</a></p>\n","categories":["Blogs"],"tags":["Machine Learning","Computer Music"]}]